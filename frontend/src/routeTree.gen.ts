/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CaptainsPlayersImport } from './routes/captains-players'
import { Route as CaptainsCaptainsImport } from './routes/captains-captains'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const CaptainsPlayersRoute = CaptainsPlayersImport.update({
  id: '/captains-players',
  path: '/captains-players',
  getParentRoute: () => rootRoute,
} as any)

const CaptainsCaptainsRoute = CaptainsCaptainsImport.update({
  id: '/captains-captains',
  path: '/captains-captains',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/captains-captains': {
      id: '/captains-captains'
      path: '/captains-captains'
      fullPath: '/captains-captains'
      preLoaderRoute: typeof CaptainsCaptainsImport
      parentRoute: typeof rootRoute
    }
    '/captains-players': {
      id: '/captains-players'
      path: '/captains-players'
      fullPath: '/captains-players'
      preLoaderRoute: typeof CaptainsPlayersImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/captains-captains': typeof CaptainsCaptainsRoute
  '/captains-players': typeof CaptainsPlayersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/captains-captains': typeof CaptainsCaptainsRoute
  '/captains-players': typeof CaptainsPlayersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/captains-captains': typeof CaptainsCaptainsRoute
  '/captains-players': typeof CaptainsPlayersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/captains-captains' | '/captains-players'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/captains-captains' | '/captains-players'
  id: '__root__' | '/' | '/captains-captains' | '/captains-players'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CaptainsCaptainsRoute: typeof CaptainsCaptainsRoute
  CaptainsPlayersRoute: typeof CaptainsPlayersRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CaptainsCaptainsRoute: CaptainsCaptainsRoute,
  CaptainsPlayersRoute: CaptainsPlayersRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/captains-captains",
        "/captains-players"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/captains-captains": {
      "filePath": "captains-captains.tsx"
    },
    "/captains-players": {
      "filePath": "captains-players.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
